import { startWebSocketServer } from './websocket';
import express from 'express';
import cors from 'cors';
import http from 'http';
import routes from './routes';
import { getPort } from './config';
import logger from './utils/logger';

const port = getPort();

const app = express();
const server = http.createServer(app);

const corsOptions = {
  origin: '*',
};

logger.info(`ğŸš€ Initializing Server Setup...`);
logger.info(`ğŸ›  CORS Policy Applied: ${JSON.stringify(corsOptions)}`);

app.use(cors(corsOptions));
app.use(express.json());

// âœ… Middleware to log incoming requests
app.use((req, res, next) => {
  logger.info(`ğŸ“© API Request - ${req.method} ${req.originalUrl}`);
  next();
});

logger.info(`âœ… API Routes Initialized`);

app.use('/api', routes);
app.get('/api', (_, res) => {
  logger.info(`ğŸŸ¢ Health Check Endpoint Hit`);
  res.status(200).json({ status: 'ok' });
});

// âœ… Log when the server starts listening
server.listen(port, () => {
  logger.info(`âœ… Server is running on port ${port}`);
});

// âœ… Log WebSocket Initialization
logger.info(`ğŸ“¡ Starting WebSocket Server...`);
startWebSocketServer(server);

// âœ… Better Logging for Uncaught Errors
process.on('uncaughtException', (err, origin) => {
  logger.error(`ğŸ”¥ Uncaught Exception at ${origin}: ${err.message}`);
  logger.error(err.stack);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error(`ğŸš¨ Unhandled Rejection at: ${promise}`);
  logger.error(`ğŸ’¥ Reason: ${reason}`);
});
